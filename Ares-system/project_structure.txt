=== 目录结构 ===
Ares-system/
    pom.xml
    project_structure.txt
    scan.py
    src/
        main/
            java/
                org/
                    startear/
                        ares/
                            AresApplication.java
                            config/
                                SecurityConfiguration.java
                                SwaggerConfig.java
                            controller/
                                HelloController.java
                                TestController.java
                            entity/
                                RestBean.java
                                dto/
                                vo/
                                    request/
                                    response/
                                        AuthorizeVO.java
                            filter/
                                JwtAuthorizeFilter.java
                            mapper/
                                UserMapper.java
                            model/
                                User.java
                            service/
                                impl/
                            utils/
                                JwtUtils.java
            resources/
                application.yml
                mapper/
        test/
            java/
                src/
                    test/
                        org/
                            startear/
                                ares/
                                    mapper/
                                    service/
    target/
        classes/
            application.yml
            org/
                startear/
                    ares/
                        AresApplication.class
                        config/
                            SecurityConfiguration.class
                            SwaggerConfig.class
                        controller/
                            HelloController.class
                            TestController.class
                        entity/
                            RestBean.class
                            vo/
                                response/
                                    AuthorizeVO.class
                        filter/
                            JwtAuthorizeFilter.class
                        mapper/
                            UserMapper.class
                        model/
                            User.class
                        utils/
                            JwtUtils.class
        generated-sources/
            annotations/


=== 文件详情 ===


■ 文件名: pom.xml
■ 路径: pom.xml
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.2</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.example</groupId>
    <artifactId>my-project-backend</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>my-project-backend</name>
    <description>my-project-backend</description>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
        <!--    邮件发送模块    -->

        <!--    接口参数校验模块    -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <!--    授权校验模块    -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <!--    基础Web模块    -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--    Redis交互模块    -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <!--    Mybatis-Plus框架    -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>3.5.3.1</version>
        </dependency>
        <!--    MySQL驱动    -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <!--    Lombok框架    -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.32</version>
            <scope>provided</scope>
        </dependency>
        <!--    测试模块    -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!--    消息队列模块    -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>
        <!--    FastJSON2框架    -->
        <dependency>
            <groupId>com.alibaba.fastjson2</groupId>
            <artifactId>fastjson2</artifactId>
            <version>2.0.25</version>
        </dependency>
        <!--    Jwt令牌生成校验框架    -->
        <dependency>
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
            <version>4.3.0</version>
        </dependency>
        <!--    Swagger文档生成框架    -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version> 2.3.0</version>
        </dependency>
    </dependencies>

    <profiles>
        <!-- 开发环境 -->
        <profile>
            <id>dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <environment>dev</environment>
            </properties>
        </profile>
        <!-- 生产环境 -->
        <profile>
            <id>prod</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <environment>prod</environment>
            </properties>
        </profile>
    </profiles>

    <build>
        <plugins>
            <plugin>
                <groupId>org.graalvm.buildtools</groupId>
                <artifactId>native-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>application*.yml</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>application.yml</include>
                    <include>application-${environment}.yml</include>
                </includes>
            </resource>
        </resources>
    </build>

</project>


■ 文件名: scan.py
■ 路径: scan.py
--------------------------------------------------
import os
import sys

def scan_directory(output_file):
    # 获取当前脚本所在目录
    base_dir = os.path.dirname(os.path.abspath(__file__))

    with open(output_file, 'w', encoding='utf-8') as f_out:
        # 写入目录结构
        f_out.write("=== 目录结构 ===\n")
        for root, dirs, files in os.walk(base_dir):
            level = root.replace(base_dir, '').count(os.sep)
            indent = ' ' * 4 * level
            f_out.write(f'{indent}{os.path.basename(root)}/\n')
            sub_indent = ' ' * 4 * (level + 1)
            for file in files:
                f_out.write(f'{sub_indent}{file}\n')

        f_out.write("\n\n=== 文件详情 ===\n")

        # 遍历所有文件
        for root, dirs, files in os.walk(base_dir):
            for file in files:
                file_path = os.path.join(root, file)
                relative_path = os.path.relpath(file_path, base_dir)

                try:
                    # 跳过生成的输出文件本身
                    if file_path == os.path.abspath(output_file):
                        continue

                    # 写入文件信息
                    f_out.write(f"\n\n■ 文件名: {file}\n")
                    f_out.write(f"■ 路径: {relative_path}\n")
                    f_out.write("-" * 50 + "\n")

                    # 尝试读取文件内容
                    with open(file_path, 'r', encoding='utf-8') as f_in:
                        content = f_in.read()
                        f_out.write(content + "\n")
                except UnicodeDecodeError:
                    # 处理二进制文件
                    f_out.write("[二进制文件内容无法显示]\n")
                except Exception as e:
                    f_out.write(f"[文件读取错误: {str(e)}]\n")

if __name__ == "__main__":
    output_filename = "project_structure.txt"
    scan_directory(output_filename)
    print(f"扫描完成，结果已保存到 {output_filename}")


■ 文件名: AresApplication.java
■ 路径: src\main\java\org\startear\ares\AresApplication.java
--------------------------------------------------
package org.startear.ares;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class AresApplication {
    public static void main(String[] args) {
        SpringApplication.run(AresApplication.class, args);
    }
}


■ 文件名: SecurityConfiguration.java
■ 路径: src\main\java\org\startear\ares\config\SecurityConfiguration.java
--------------------------------------------------
package org.startear.ares.config;


import jakarta.annotation.Resource;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.web.SecurityFilterChain;
import org.startear.ares.entity.RestBean;
import org.startear.ares.entity.vo.response.AuthorizeVO;
import org.startear.ares.filter.JwtAuthorizeFilter;
import org.startear.ares.utils.JwtUtils;

import java.io.IOException;
import java.io.PrintWriter;


@Configuration
public class SecurityConfiguration {

    @Resource
    JwtUtils utils;
    @Resource
    JwtAuthorizeFilter jwtAuthorizeFilter;

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        return http
                .authorizeHttpRequests(conf -> conf
                        .requestMatchers("/api/auth/**").permitAll()
                        .anyRequest().authenticated()
                )
                .formLogin(conf -> conf
                        .loginProcessingUrl("/api/auth/login")
                        .failureHandler(this::onAuthenticationFailure)
                        .successHandler(this:: onAuthenticationSuccess)
                        .permitAll()
                )
                .logout(conf -> conf
                        .logoutUrl("/api/auth/logout")
                        .logoutSuccessHandler(this::onLogoutSuccess)
                )
                .csrf(AbstractHttpConfigurer::disable)
                .sessionManagement(conf -> conf
                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .addFilterBefore(jwtAuthorizeFilter, UsernamePasswordAuthenticationFilter.class)
                .build();
    }


    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        User user = (User)authentication.getPrincipal();
        String token = utils.createJwt(user,1,"kobe");
        AuthorizeVO vo = new AuthorizeVO();
        vo.setExpire(utils.expireTime());
        vo.setRole("小丑");
        vo.setToken(token);
        vo.setUsername("kobe");
        response.getWriter().write(RestBean.success(vo).asJsonString());
    }
    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException {
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        response.getWriter().write(RestBean.failure(401,exception.getMessage()).asJsonString());
    }

    public void onLogoutSuccess(HttpServletRequest request,
                                HttpServletResponse response,
                                Authentication authentication) throws IOException, ServletException {

    }
}



■ 文件名: SwaggerConfig.java
■ 路径: src\main\java\org\startear\ares\config\SwaggerConfig.java
--------------------------------------------------
package org.startear.ares.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SwaggerConfig {
    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("Ares System API")
                        .version("1.0")
                        .description("健康管理系统接口文档"));
    }
}


■ 文件名: HelloController.java
■ 路径: src\main\java\org\startear\ares\controller\HelloController.java
--------------------------------------------------
package org.startear.ares.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import io.swagger.v3.oas.annotations.Operation;

@RestController
public class HelloController {
    @Operation(summary = "测试接口", description = "返回欢迎信息")
    @GetMapping("/hello")
    public String hello() {
        return "Hello Spring Boot!";
    }
}


■ 文件名: TestController.java
■ 路径: src\main\java\org\startear\ares\controller\TestController.java
--------------------------------------------------
package org.startear.ares.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/test")
public class TestController {
    @GetMapping("/hello")
    public String test() {
        return "Hello Spring Boot!";
    }
}



■ 文件名: RestBean.java
■ 路径: src\main\java\org\startear\ares\entity\RestBean.java
--------------------------------------------------
package org.startear.ares.entity;

import com.alibaba.fastjson2.JSONObject;
import com.alibaba.fastjson2.JSONWriter;

public record RestBean<T>(int code, T data , String message){
    public static <T> RestBean<T> success(T data){
        return new RestBean<>(200,data,"请求成功");
    }

    public static <T> RestBean<T> success(){
        return success(null);
    }

    public static <T> RestBean<T> failure(int code, String message){
        return new RestBean<>(code,null,message);
    }
    public String asJsonString(){
        return JSONObject.toJSONString(this, JSONWriter.Feature.WriteNulls);
    }
}



■ 文件名: AuthorizeVO.java
■ 路径: src\main\java\org\startear\ares\entity\vo\response\AuthorizeVO.java
--------------------------------------------------
package org.startear.ares.entity.vo.response;

import lombok.Data;

import java.util.Date;

@Data
public class AuthorizeVO {
    String username;
    String role;
    String token;
    Date expire;
}



■ 文件名: JwtAuthorizeFilter.java
■ 路径: src\main\java\org\startear\ares\filter\JwtAuthorizeFilter.java
--------------------------------------------------
package org.startear.ares.filter;

import com.auth0.jwt.interfaces.DecodedJWT;
import jakarta.annotation.Resource;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.startear.ares.utils.JwtUtils;

import java.io.IOException;

@Component
public class JwtAuthorizeFilter extends OncePerRequestFilter {
    @Resource
    JwtUtils utils;
    @Override
    protected void doFilterInternal(    HttpServletRequest request,
                                        HttpServletResponse response,
                                        FilterChain filterChain) throws ServletException, IOException {
        String authorization = request.getHeader("Authorization");
        DecodedJWT jwt = utils.resloveJwt(authorization);
        if(jwt != null){
            UserDetails user = utils.toUser(jwt);
            UsernamePasswordAuthenticationToken authentication =
                    new UsernamePasswordAuthenticationToken(user,null,user.getAuthorities());
            authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
            SecurityContextHolder.getContext().setAuthentication(authentication);
            request.setAttribute("id",utils.toId(jwt));
        }
        filterChain.doFilter(request,response);
    }
}



■ 文件名: UserMapper.java
■ 路径: src\main\java\org\startear\ares\mapper\UserMapper.java
--------------------------------------------------
package org.startear.ares.mapper;

import org.apache.ibatis.annotations.Mapper;
import org.startear.ares.model.User;

@Mapper
public interface UserMapper {
    int insertUser(User user);
    User selectUserById(Long id);
    User selectUserByUsername(String username);
    int updateUser(User user);
    int deleteUser(Long id);
}


■ 文件名: User.java
■ 路径: src\main\java\org\startear\ares\model\User.java
--------------------------------------------------
package org.startear.ares.model;

import lombok.Data;

@Data
public class User {
    private Long id;
    private String username;
    private String password;
    private String email;
    private String createTime;
}


■ 文件名: JwtUtils.java
■ 路径: src\main\java\org\startear\ares\utils\JwtUtils.java
--------------------------------------------------
package org.startear.ares.utils;

import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTVerificationException;
import com.auth0.jwt.interfaces.Claim;
import com.auth0.jwt.interfaces.DecodedJWT;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;
import com.auth0.jwt.JWT;

import java.util.Calendar;
import java.util.Date;
import java.util.Map;

@Component
public class JwtUtils {
    @Value("${spring.security.jwt.secret}")
    String key;
    @Value("${spring.security.jwt.expire}")
    int expire;
    public DecodedJWT resloveJwt(String headerToken) {
        String token = this.convertToken(headerToken);
        if(token == null) {
            return null;
        }
        Algorithm algorithm = Algorithm.HMAC256(key);
        JWTVerifier JwtVerifier = JWT.require(algorithm).build();
        try {
            DecodedJWT verify =  JwtVerifier.verify(token);
            Date expiresAt = verify.getExpiresAt();
            return new Date().after(expiresAt) ? null : verify;
        } catch (JWTVerificationException e) {
            return null;
        }

    }
    public String createJwt(UserDetails details,int id,String username) {
        Algorithm algorithm = Algorithm.HMAC256(key);
        Date expire = this.expireTime();
        return JWT.create()
                .withClaim("id",id)
                .withClaim("name",username)
                .withClaim("authorities",details.getAuthorities().stream().map(GrantedAuthority::getAuthority).toList())
                .withExpiresAt(new Date())
                .sign(algorithm);
    }
    public Date expireTime() {
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.HOUR,expire * 24);
        return calendar.getTime();
    }

    public UserDetails toUser(DecodedJWT jwt) {
        Map<String, Claim> claims = jwt.getClaims();
        return User
                .withUsername(  claims.get("name").asString())
                .password("******")
                .authorities(claims.get("authorities").asArray(String.class))
                .build();
    }
    public Integer toId(DecodedJWT jwt) {
        Map<String,Claim> claims = jwt.getClaims();
        return claims.get("id").asInt();
    }
    private String convertToken(String headerToken){
        if(headerToken == null || !headerToken.startsWith("Bearer ")){
            return null;
        }
        return headerToken.substring(7);
    }

}



■ 文件名: application.yml
■ 路径: src\main\resources\application.yml
--------------------------------------------------
server:
  port: 8080
#  servlet:
#    context-path: /api

spring:
  security:
    jwt:
      secret: ares
      expire: 7
  application:
    name: Ares-System
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ares?useUnicode=true&characterEncoding=utf-8
    username: root
    password: 123456

mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: org.startear.ares.model

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui


■ 文件名: application.yml
■ 路径: target\classes\application.yml
--------------------------------------------------
server:
  port: 8080
#  servlet:
#    context-path: /api

spring:
  security:
    jwt:
      secret: ares
      expire: 7
  application:
    name: Ares-System
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ares?useUnicode=true&characterEncoding=utf-8
    username: root
    password: 123456

mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: org.startear.ares.model

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui


■ 文件名: AresApplication.class
■ 路径: target\classes\org\startear\ares\AresApplication.class
--------------------------------------------------
[二进制文件内容无法显示]


■ 文件名: SecurityConfiguration.class
■ 路径: target\classes\org\startear\ares\config\SecurityConfiguration.class
--------------------------------------------------
[二进制文件内容无法显示]


■ 文件名: SwaggerConfig.class
■ 路径: target\classes\org\startear\ares\config\SwaggerConfig.class
--------------------------------------------------
[二进制文件内容无法显示]


■ 文件名: HelloController.class
■ 路径: target\classes\org\startear\ares\controller\HelloController.class
--------------------------------------------------
[二进制文件内容无法显示]


■ 文件名: TestController.class
■ 路径: target\classes\org\startear\ares\controller\TestController.class
--------------------------------------------------
[二进制文件内容无法显示]


■ 文件名: RestBean.class
■ 路径: target\classes\org\startear\ares\entity\RestBean.class
--------------------------------------------------
[二进制文件内容无法显示]


■ 文件名: AuthorizeVO.class
■ 路径: target\classes\org\startear\ares\entity\vo\response\AuthorizeVO.class
--------------------------------------------------
[二进制文件内容无法显示]


■ 文件名: JwtAuthorizeFilter.class
■ 路径: target\classes\org\startear\ares\filter\JwtAuthorizeFilter.class
--------------------------------------------------
[二进制文件内容无法显示]


■ 文件名: UserMapper.class
■ 路径: target\classes\org\startear\ares\mapper\UserMapper.class
--------------------------------------------------
[二进制文件内容无法显示]


■ 文件名: User.class
■ 路径: target\classes\org\startear\ares\model\User.class
--------------------------------------------------
[二进制文件内容无法显示]


■ 文件名: JwtUtils.class
■ 路径: target\classes\org\startear\ares\utils\JwtUtils.class
--------------------------------------------------
[二进制文件内容无法显示]
